<?xml version="1.0" encoding="utf-8" ?>
<job>
<script language="JScript"><![CDATA[
'use strict';
this.__extends = function __extends(a, b) {
    if (a && b) {
      a.prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
    }
};
function Symbol(description) {
  return Symbol.implement(description);
}
"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
(function () {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    var _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;
    (_a = Array.isArray) !== null && _a !== void 0 ? _a : (Array.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    });
    (_b = Array.of) !== null && _b !== void 0 ? _b : (Array.of = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args;
    });
    (_c = Array.from) !== null && _c !== void 0 ? _c : (Array.from = function from(arrayLike, mapFn, thisArg) {
        if (!mapFn || typeof mapFn !== 'function' || Object.prototype.toString.call(mapFn) !== '[object Function]') {
            mapFn = function (e) {
                return e;
            };
        }
        if (Array.isArray(arrayLike)) {
            return arrayLike.map(mapFn, thisArg);
        }
        if ('length' in arrayLike) {
            var length = +arrayLike.length || 0;
            var array_1 = [];
            for (var i_1 = 0; i_1 < length; ++i_1) {
                array_1[i_1] = mapFn.call(thisArg, arrayLike[i_1], i_1);
            }
            return array_1;
        }
        if (Symbol.iterator in arrayLike) {
            var array_2 = [];
            var iterator = arrayLike[Symbol.iterator]();
            var i_2 = 0;
            for (var result = void 0; !(result = iterator.next()).done;) {
                array_2.push(mapFn.call(thisArg, result.value, i_2++));
            }
            return array_2;
        }
        var array = [];
        var i = 0;
        for (var e = new Enumerator(arrayLike); !e.atEnd(); e.moveNext()) {
            array.push(mapFn.call(thisArg, e.item(), i++));
        }
        return array;
    });
    (_d = (_v = Array.prototype).some) !== null && _d !== void 0 ? _d : (_v.some = function some(callback, thisObj) {
        for (var i = 0; i < this.length; ++i) {
            if (!(i in this)) {
                continue;
            }
            if (callback.call(thisObj, this[i], i, this)) {
                return true;
            }
        }
        return false;
    });
    (_e = (_w = Array.prototype).every) !== null && _e !== void 0 ? _e : (_w.every = function every(callback, thisObj) {
        for (var i = 0; i < this.length; ++i) {
            if (!(i in this)) {
                continue;
            }
            if (!callback.call(thisObj, this[i], i, this)) {
                return false;
            }
        }
        return true;
    });
    (_f = (_x = Array.prototype).reduce) !== null && _f !== void 0 ? _f : (_x.reduce = function reduce(callback, initialValue) {
        var index = 0;
        var result = 1 < arguments.length ? initialValue : this[index++];
        for (; index < this.length; ++index) {
            if (!(index in this)) {
                continue;
            }
            result = callback(result, this[index], index, this);
        }
        return result;
    });
    (_g = (_y = Array.prototype).reduceRight) !== null && _g !== void 0 ? _g : (_y.reduceRight = function reduceRight(callback, initialValue) {
        var index = this.length;
        var result = 1 < arguments.length ? initialValue : this[--index];
        while (index-- > 0) {
            if (!(index in this)) {
                continue;
            }
            result = callback(result, this[index], index, this);
        }
        return result;
    });
    (_h = (_z = Array.prototype).forEach) !== null && _h !== void 0 ? _h : (_z.forEach = function forEach(callback, thisObj) {
        for (var index = 0; index < this.length; ++index) {
            if (!(index in this)) {
                continue;
            }
            callback.call(thisObj, this[index], index, this);
        }
    });
    (_j = (_0 = Array.prototype).filter) !== null && _j !== void 0 ? _j : (_0.filter = function filter(callback, thisObj) {
        var result = [];
        for (var index = 0; index < this.length; ++index) {
            if (!(index in this)) {
                continue;
            }
            var element = this[index];
            if (callback.call(thisObj, element, index, this)) {
                result.push(element);
            }
        }
        return result;
    });
    (_k = (_1 = Array.prototype).map) !== null && _k !== void 0 ? _k : (_1.map = function map(callback, thisObj) {
        var result = [];
        for (var index = 0; index < this.length; ++index) {
            if (!(index in this)) {
                continue;
            }
            result[index] = callback.call(thisObj, this[index], index, this);
        }
        return result;
    });
    function adjustIndex(value, length) {
        if (value === undefined) {
            return undefined;
        }
        if (value < 0) {
            value += length;
        }
        if (value < 0) {
            value = 0;
        }
        else if (value > length) {
            value = length;
        }
        return value;
    }
    (_l = (_2 = Array.prototype).copyWithin) !== null && _l !== void 0 ? _l : (_2.copyWithin = function copyWithin(_target, _start, _end) {
        var _a, _b, _c;
        var target = (_a = adjustIndex(_target, this.length)) !== null && _a !== void 0 ? _a : 0;
        var start = (_b = adjustIndex(_start, this.length)) !== null && _b !== void 0 ? _b : 0;
        if (target === start) {
            return this;
        }
        var end = (_c = adjustIndex(_end, this.length)) !== null && _c !== void 0 ? _c : this.length;
        if (target < start) {
            for (var s = start, d = target; s < end && d < this.length; ++s, ++d) {
                this[d] = this[s];
            }
        }
        else {
            for (var s = end - 1, d = target + (end - 1 - start); s >= start && d >= 0; --s, --d) {
                this[d] = this[s];
            }
        }
        return this;
    });
    (_m = (_3 = Array.prototype).fill) !== null && _m !== void 0 ? _m : (_3.fill = function fill(value, _start, _end) {
        var _a, _b;
        var start = (_a = adjustIndex(_start, this.length)) !== null && _a !== void 0 ? _a : 0;
        var end = (_b = adjustIndex(_end, this.length)) !== null && _b !== void 0 ? _b : this.length;
        for (var i = start; i < end; ++i) {
            this[i] = value;
        }
        return this;
    });
    (_o = (_4 = Array.prototype).find) !== null && _o !== void 0 ? _o : (_4.find = function find(pred, thisArg) {
        for (var i = 0; i < this.length; ++i) {
            if (!(i in this)) {
                continue;
            }
            var e = this[i];
            if (pred.call(thisArg, e, i, this)) {
                return e;
            }
        }
        return undefined;
    });
    (_p = (_5 = Array.prototype).findIndex) !== null && _p !== void 0 ? _p : (_5.findIndex = function findIndex(pred, thisArg) {
        for (var i = 0; i < this.length; ++i) {
            if (!(i in this)) {
                continue;
            }
            var e = this[i];
            if (pred.call(thisArg, e, i, this)) {
                return i;
            }
        }
        return -1;
    });
    (_q = (_6 = Array.prototype).includes) !== null && _q !== void 0 ? _q : (_6.includes = function includes(searchElement) {
        for (var i = 0; i < this.length; ++i) {
            if (!(i in this)) {
                continue;
            }
            if (this[i] === searchElement) {
                return true;
            }
        }
        return false;
    });
    (_r = (_7 = Array.prototype).indexOf) !== null && _r !== void 0 ? _r : (_7.indexOf = function indexOf(searchElement, _start) {
        var _a;
        var start = (_a = adjustIndex(_start, this.length)) !== null && _a !== void 0 ? _a : 0;
        for (var index = start; index < this.length; ++index) {
            if (this[index] === searchElement) {
                return index;
            }
        }
        return -1;
    });
    (_s = (_8 = Array.prototype).lastIndexOf) !== null && _s !== void 0 ? _s : (_8.lastIndexOf = function lastIndexOf(searchElement, _start) {
        var _a;
        var start = (_a = adjustIndex(_start, this.length)) !== null && _a !== void 0 ? _a : this.length - 1;
        for (var index = start; index >= 0; --index) {
            if (this[index] === searchElement) {
                return index;
            }
        }
        return -1;
    });
    (_t = (_9 = Array.prototype).entries) !== null && _t !== void 0 ? _t : (_9.entries = function entries() {
        var i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < this.length)) return [3, 4];
                    return [4, [i, this[i]]];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    ++i;
                    return [3, 1];
                case 4: return [2];
            }
        });
    });
    (_u = (_10 = Array.prototype).keys) !== null && _u !== void 0 ? _u : (_10.keys = function keys() {
        var i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < this.length)) return [3, 4];
                    return [4, i];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    ++i;
                    return [3, 1];
                case 4: return [2];
            }
        });
    });
})();
(function () {
    var _a;
    (_a = this.console) !== null && _a !== void 0 ? _a : (this.console = {
        log: function () {
            output(WScript.StdOut, arguments);
        },
        error: function () {
            output(WScript.StdErr, arguments);
        }
    });
    function output(stream, messages) {
        stream.WriteLine("[".concat(new Date().toLocaleTimeString(), "] ").concat(Array.from(messages, function (m) { return String(m); }).join(' ')));
    }
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
(function () {
    var _a, _b;
    var _c;
    function format(template) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        return template.reduce(function (r, e, i) {
            var v = values[i - 1];
            var _a = __read(Array.isArray(v) ? v : [v, 2], 2), num = _a[0], digits = _a[1];
            return r + (digits ? num.toString().padStart(digits, '0') : num) + e;
        });
    }
    (_a = (_c = Date.prototype).toISOString) !== null && _a !== void 0 ? _a : (_c.toISOString = function toISOString() {
        if (isNaN(this.getTime())) {
            throw new Error('Invalid date');
        }
        return format(__makeTemplateObject(["", "-", "-", "T", ":", ":", ".", "Z"], ["", "-", "-", "T", ":", ":", ".", "Z"]), this.getUTCFullYear(), this.getUTCMonth() + 1, this.getUTCDate(), this.getUTCHours(), this.getUTCMinutes(), this.getUTCSeconds(), [
            this.getUTCMilliseconds(),
            3,
        ]);
    });
    (_b = Date.now) !== null && _b !== void 0 ? _b : (Date.now = function now() {
        return new Date().getTime();
    });
})();
var _a, _b;
var _c, _d, _e, _f;
(function () {
    var symbols = {};
    this.Symbol.implement = function Symbol_implement(description) {
        var id = "Symbol@@".concat(description, "@@").concat(new Date().getTime(), "@@").concat(Math.random());
        symbols[id] = true;
        var symbol = {
            toString: function () {
                return id;
            },
            valueOf: function () {
                return description || '';
            }
        };
        return symbol;
    };
    this.Symbol.isSymbol = function (symbol) { return String(symbol) in symbols; };
    var registered = {};
    this.Symbol["for"] = function (key) { var _a; return ((_a = registered[key]) !== null && _a !== void 0 ? _a : (registered[key] = Symbol(key))); };
    this.Symbol.keyFor = function (sym) { var _a; return (_a = Object.entries(registered).find(function (_a) {
        var _b = __read(_a, 2), symbol = _b[1];
        return symbol === sym;
    })) === null || _a === void 0 ? void 0 : _a[0]; };
    this.Symbol.iterator = Symbol('iterator');
    this.Symbol.hasInstance = Symbol('hasInstance');
    this.Symbol.isConcatSpreadable = Symbol('isConcatSpreadable');
    this.Symbol.match = Symbol('match');
    this.Symbol.replace = Symbol('replace');
    this.Symbol.search = Symbol('search');
    this.Symbol.species = Symbol('species');
    this.Symbol.split = Symbol('split');
    this.Symbol.toPrimitive = Symbol('toPrimitive');
    this.Symbol.toStringTag = Symbol('toStringTag');
    this.Symbol.unscopables = Symbol('unscopables');
    this.Symbol.matchAll = Symbol('matchAll');
})();
(_a = (_c = Array.prototype)[_d = Symbol.iterator]) !== null && _a !== void 0 ? _a : (_c[_d] = function () {
    var i;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                i = 0;
                _a.label = 1;
            case 1:
                if (!(i < this.length)) return [3, 4];
                return [4, this[i]];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3:
                ++i;
                return [3, 1];
            case 4: return [2];
        }
    });
});
(_b = (_e = String.prototype)[_f = Symbol.iterator]) !== null && _b !== void 0 ? _b : (_e[_f] = function () {
    var i;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                i = 0;
                _a.label = 1;
            case 1:
                if (!(i < this.length)) return [3, 4];
                return [4, this.charAt(i)];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3:
                ++i;
                return [3, 1];
            case 4: return [2];
        }
    });
});
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
(function () {
    var _a, _b, _c, _d, _e, _f;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var dontEnums = [
        'toString',
        'toLocaleString',
        'valueOf',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'constructor',
    ];
    function keys(name, obj) {
        var _a, _b, _c, _i, prop, dontEnums_1, dontEnums_1_1, name_1, e_1_1;
        var e_1, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (obj === null || obj === undefined) {
                        throw new TypeError("".concat(name, " called on non-object"));
                    }
                    switch (typeof obj) {
                        case 'object':
                            if (Symbol.isSymbol(obj)) {
                                return [2];
                            }
                        case 'function':
                            break;
                        default:
                            return [2];
                    }
                    _a = obj;
                    _b = [];
                    for (_c in _a)
                        _b.push(_c);
                    _i = 0;
                    _e.label = 1;
                case 1:
                    if (!(_i < _b.length)) return [3, 4];
                    _c = _b[_i];
                    if (!(_c in _a)) return [3, 3];
                    prop = _c;
                    if (Symbol.isSymbol(prop)) {
                        return [3, 3];
                    }
                    if (!hasOwnProperty.call(obj, prop)) {
                        return [3, 3];
                    }
                    return [4, prop];
                case 2:
                    _e.sent();
                    _e.label = 3;
                case 3:
                    _i++;
                    return [3, 1];
                case 4:
                    _e.trys.push([4, 9, 10, 11]);
                    dontEnums_1 = __values(dontEnums), dontEnums_1_1 = dontEnums_1.next();
                    _e.label = 5;
                case 5:
                    if (!!dontEnums_1_1.done) return [3, 8];
                    name_1 = dontEnums_1_1.value;
                    if (!hasOwnProperty.call(obj, name_1)) {
                        return [3, 7];
                    }
                    return [4, name_1];
                case 6:
                    _e.sent();
                    _e.label = 7;
                case 7:
                    dontEnums_1_1 = dontEnums_1.next();
                    return [3, 5];
                case 8: return [3, 11];
                case 9:
                    e_1_1 = _e.sent();
                    e_1 = { error: e_1_1 };
                    return [3, 11];
                case 10:
                    try {
                        if (dontEnums_1_1 && !dontEnums_1_1.done && (_d = dontEnums_1["return"])) _d.call(dontEnums_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7];
                case 11: return [2];
            }
        });
    }
    function map(iterable, pred) {
        var iterable_1, iterable_1_1, e, e_2_1;
        var e_2, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 7]);
                    iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next();
                    _b.label = 1;
                case 1:
                    if (!!iterable_1_1.done) return [3, 4];
                    e = iterable_1_1.value;
                    return [4, pred(e)];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    iterable_1_1 = iterable_1.next();
                    return [3, 1];
                case 4: return [3, 7];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 7];
                case 6:
                    try {
                        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"])) _a.call(iterable_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7];
                case 7: return [2];
            }
        });
    }
    (_a = Object.keys) !== null && _a !== void 0 ? _a : (Object.keys = function (obj) { return __spreadArray([], __read(keys('Object.keys', obj)), false); });
    (_b = Object.entries) !== null && _b !== void 0 ? _b : (Object.entries = function (obj) { return __spreadArray([], __read(map(keys('Object.entries', obj), function (name) { return [name, obj[name]]; })), false); });
    (_c = Object.values) !== null && _c !== void 0 ? _c : (Object.values = function (obj) { return __spreadArray([], __read(map(keys('Object.values', obj), function (name) { return obj[name]; })), false); });
    (_d = Object.fromEntries) !== null && _d !== void 0 ? _d : (Object.fromEntries = function (entries) {
        return entries.reduce(function (r, _a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            return ((r[name] = value), r);
        }, {});
    });
    (_e = Object.create) !== null && _e !== void 0 ? _e : (Object.create = function (proto, propertiesObject) {
        if (typeof proto !== 'object' && typeof proto !== 'function') {
            throw new TypeError("Object prototype may only be an Object: ".concat(proto));
        }
        if (proto === null) {
            throw new Error("This Object.create is a shim and doesn't support 'null' as the first argument.");
        }
        if (propertiesObject !== undefined) {
            throw new Error("This Object.create is a shim and doesn't support a second argument.");
        }
        var F = (function () {
            function F() {
            }
            return F;
        }());
        F.prototype = proto;
        if (typeof proto === 'function') {
            var originalToString_1 = proto.toString;
            proto.toString = function () { return originalToString_1.call(proto); };
        }
        return new F();
    });
    (_f = Object.assign) !== null && _f !== void 0 ? _f : (Object.assign = function (target) {
        var e_3, _a, e_4, _b;
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (target == null) {
            throw new TypeError('Cannot convert null or undefined to object');
        }
        var to = new Object(target);
        try {
            for (var sources_1 = __values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {
                var source = sources_1_1.value;
                try {
                    for (var _c = (e_4 = void 0, __values(Object.keys(source))), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var name = _d.value;
                        to[name] = source[name];
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c["return"])) _b.call(_c);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (sources_1_1 && !sources_1_1.done && (_a = sources_1["return"])) _a.call(sources_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return to;
    });
})();
(function () {
    var ENQUOTE = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r'
    };
    var DEQUOTE = Object.fromEntries(Object.entries(ENQUOTE).map(function (_a) {
        var _b = __read(_a, 2), ch = _b[0], enquote = _b[1];
        return [enquote, ch];
    }));
    var ENQUOTE_RE = /[\x00-\x1f\\"]/g;
    var DEQUOTE_RE = /\\(?:u([0-9A-Fa-f]{4})|.)/g;
    var ACCEPT_TYPES = {
        boolean: true,
        number: true,
        object: true,
        string: true,
        undefined: true
    };
    this.JSON = this.JSON || {};
    function enquote(str) {
        return "\"".concat(str.replace(ENQUOTE_RE, function (ch) {
            return '\\"'.includes(ch)
                ? "\\".concat(ch)
                : ch in ENQUOTE
                    ? ENQUOTE[ch]
                    : '\\u' + ch.charCodeAt(0).toString(16).padStart(4, '0');
        }), "\"");
    }
    function dequote(quoted) {
        return quoted
            .slice(1, -1)
            .replace(DEQUOTE_RE, function (enquote, hex) {
            return hex ? String.fromCharCode(parseInt(hex, 16)) : enquote in DEQUOTE ? DEQUOTE[enquote] : enquote.charAt(1);
        });
    }
    var cache = {};
    var Parser = (function () {
        function Parser(str) {
            this.str = str;
            this.index = 0;
        }
        Parser.prototype.parse = function (reviewer) {
            var value = this.parseValue();
            this.skipWS();
            if (this.isLeft()) {
                this.failedParsing();
            }
            if (!reviewer) {
                return value;
            }
            return (function recursive(key, subvalue) {
                var e_5, _a;
                if (subvalue && typeof subvalue === 'object') {
                    try {
                        for (var _b = __values(Object.entries(subvalue)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
                            subvalue[k] = recursive(k, v);
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                return reviewer(key, subvalue);
            })('', value);
        };
        Parser.prototype.stickyMatch = function (pattern) {
            var re = cache[pattern] || (cache[pattern] = new RegExp("(?:".concat(pattern, ")|(?=([\\s\\S]))"), 'g'));
            re.lastIndex = this.index;
            var match = re.exec(this.str);
            if (!match || match[match.length - 1]) {
                return undefined;
            }
            this.index += match[0].length;
            return match;
        };
        Parser.prototype.failedParsing = function () {
            if (!this.isLeft()) {
                throw new Error("Unexpected the end of string");
            }
            var re = /[^\r\n]*(?:\r?\n|\r|$)/g;
            var _a = __read([0, 0], 2), line = _a[0], bol = _a[1];
            while (true) {
                var match = re.exec(this.str);
                if (!match) {
                    break;
                }
                var eol = match.index + match[0].length;
                if (eol >= this.index) {
                    break;
                }
                ++line;
                bol = eol;
            }
            var column = this.index - bol;
            throw new Error("unexpected: ".concat(this.str.substr(this.index, 10), " at line: ").concat(line, ", column: ").concat(column));
        };
        Parser.prototype.skipWS = function () {
            this.stickyMatch("\\s+");
        };
        Parser.prototype.scanOne = function (candidates, noThrow) {
            this.skipWS();
            if (!this.isLeft()) {
                return this.failedParsing();
            }
            var ch = this.str.charAt(this.index);
            if (candidates.indexOf(ch) < 0) {
                if (noThrow) {
                    return undefined;
                }
                return this.failedParsing();
            }
            ++this.index;
            return ch;
        };
        Parser.prototype.parseWord = function (pattern, value) {
            this.skipWS();
            return this.stickyMatch(pattern) ? value : this.failedParsing();
        };
        Parser.prototype.parseNumber = function () {
            this.skipWS();
            var match = this.stickyMatch("-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[Ee][-+]?\\d+)?\\b");
            return match ? +match[0] : this.failedParsing();
        };
        Parser.prototype.parseString = function () {
            this.skipWS();
            var match = this.stickyMatch("\"[^\\\\\"]*(?:\\\\.[^\\\\\"]*)*\"");
            return match ? dequote(match[0]) : this.failedParsing();
        };
        Parser.prototype.parseSequence = function (terminater, initialValue, continuousProc) {
            ++this.index;
            var value = initialValue;
            if (!this.scanOne(terminater, true)) {
                var termsep = terminater + ',';
                do {
                    continuousProc(value);
                } while (this.scanOne(termsep) !== terminater);
            }
            return value;
        };
        Parser.prototype.parseValue = function () {
            var _this = this;
            this.skipWS();
            switch (this.str.charAt(this.index)) {
                case 'n':
                    return this.parseWord("null\\b", null);
                case 't':
                    return this.parseWord("true\\b", true);
                case 'f':
                    return this.parseWord("false\\b", false);
                case '-':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    return this.parseNumber();
                case '"':
                    return this.parseString();
                case '[':
                    return this.parseSequence(']', [], function (arr) {
                        arr.push(_this.parseValue());
                    });
                case '{':
                    return this.parseSequence('}', {}, function (obj) {
                        _this.skipWS();
                        var name = _this.parseString();
                        _this.scanOne(':');
                        obj[name] = _this.parseValue();
                    });
            }
            this.failedParsing();
        };
        Parser.prototype.isLeft = function () {
            return this.index < this.str.length;
        };
        return Parser;
    }());
    this.JSON.parse =
        this.JSON.parse ||
            function parse(str, reviewer) {
                return new Parser(str).parse(reviewer);
            };
    this.JSON.stringify =
        this.JSON.stringify ||
            function stringify(value, replacer, space) {
                var validKeys = Array.isArray(replacer) ? replacer : undefined;
                var p = typeof replacer === 'function' ? replacer : undefined;
                var indentUnit = typeof space === 'number' ? ' '.repeat(space) : typeof space === 'string' ? space : '';
                var indent = function (depth) { return (indentUnit && '\n' + indentUnit.repeat(depth)) || ''; };
                return (function sub(v, depth) {
                    switch (v) {
                        case undefined:
                        case null:
                            return 'null';
                        case true:
                            return 'true';
                        case false:
                            return 'false';
                    }
                    var handlers = {
                        number: function (n) { return (isNaN(n) ? 'null' : '' + n); },
                        string: function (s) { return enquote(s); },
                        object: function (o) {
                            if (typeof o.toJSON === 'function') {
                                var json = o.toJSON();
                                if (json !== o) {
                                    return sub(json, depth);
                                }
                            }
                            if (Array.isArray(o)) {
                                if (o.length === 0) {
                                    return '[]';
                                }
                                return ('[' +
                                    indent(depth + 1) +
                                    o
                                        .map(function (json, i) {
                                        return sub(p ? p('' + i, json) : json, depth + 1) ||
                                            'null';
                                    })
                                        .join(',' + indent(depth + 1)) +
                                    indent(depth) +
                                    ']');
                            }
                            var entries = Object.entries(o)
                                .filter(function (_a) {
                                var _b = __read(_a, 2), k = _b[0], sv = _b[1];
                                return ACCEPT_TYPES[typeof sv] && (!validKeys || validKeys.includes(k));
                            })
                                .map(function (_a) {
                                var _b = __read(_a, 2), k = _b[0], sv = _b[1];
                                return [enquote(k), sub(p ? p(k, sv) : sv, depth + 1)];
                            })
                                .filter(function (_a) {
                                var _b = __read(_a, 2), sv = _b[1];
                                return !!sv;
                            })
                                .map(function (_a) {
                                var _b = __read(_a, 2), k = _b[0], sv = _b[1];
                                return "".concat(k, ":").concat(space ? ' ' : '').concat(sv);
                            });
                            if (entries.length === 0) {
                                return '{}';
                            }
                            return '{' + indent(depth + 1) + entries.join(',' + indent(depth + 1)) + indent(depth) + '}';
                        }
                    };
                    var handler = handlers[typeof v];
                    return handler ? handler(v) : '';
                })(value, 0);
            };
})();
(function () {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    var _k, _l, _m;
    (_a = (_k = this.Number).EPSILON) !== null && _a !== void 0 ? _a : (_k.EPSILON = Math.pow(2, -52));
    (_b = (_l = this.Number).MAX_SAFE_INTEGER) !== null && _b !== void 0 ? _b : (_l.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1);
    (_c = (_m = this.Number).MIN_SAFE_INTEGER) !== null && _c !== void 0 ? _c : (_m.MIN_SAFE_INTEGER = -Number.MAX_SAFE_INTEGER);
    (_d = Number.isFinite) !== null && _d !== void 0 ? _d : (Number.isFinite = isFinite);
    (_e = Number.isInteger) !== null && _e !== void 0 ? _e : (Number.isInteger = isInteger);
    (_f = Number.isNaN) !== null && _f !== void 0 ? _f : (Number.isNaN = function (o) { return typeof o === 'number' && isNaN(o); });
    (_g = Number.isSafeInteger) !== null && _g !== void 0 ? _g : (Number.isSafeInteger = isSafeInteger);
    (_h = Number.parseFloat) !== null && _h !== void 0 ? _h : (Number.parseFloat = parseFloat);
    (_j = Number.parseInt) !== null && _j !== void 0 ? _j : (Number.parseInt = parseInt);
    function isFinite(o) {
        return typeof o === 'number' && o !== Infinity && o !== -Infinity && !isNaN(o);
    }
    function isInteger(o) {
        return typeof o === 'number' && Math.ceil(o) === o;
    }
    function isSafeInteger(o) {
        return isInteger(o) && o <= Number.MAX_SAFE_INTEGER && o >= Number.MIN_SAFE_INTEGER;
    }
})();
(function () {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    var _j, _k, _l, _m, _o, _p, _q, _r;
    (_a = (_j = String.prototype).repeat) !== null && _a !== void 0 ? _a : (_j.repeat = function repeat(count) {
        if (!count) {
            return '';
        }
        if (count < 0) {
            throw new Error('repeat count must be non-negative');
        }
        if (count === Infinity) {
            throw new Error('repeat count must be less than infinity');
        }
        return Array(count).fill(this).join('');
    });
    String.prototype.substr = function substr(start, length) {
        if (length !== undefined && (!length || length < 0)) {
            return '';
        }
        return this.slice(start, length !== undefined ? (start < 0 && start + length >= 0 ? undefined : start + length) : this.length);
    };
    (_b = (_k = String.prototype).padStart) !== null && _b !== void 0 ? _b : (_k.padStart = function padStart(length, paddings) {
        var count = length - this.length;
        if (count <= 0) {
            return "".concat(this);
        }
        paddings !== null && paddings !== void 0 ? paddings : (paddings = ' ');
        return paddings.repeat((length / paddings.length + 1) | 0).slice(0, count) + this;
    });
    (_c = (_l = String.prototype).padEnd) !== null && _c !== void 0 ? _c : (_l.padEnd = function padEnd(length, paddings) {
        var count = length - this.length;
        if (count <= 0) {
            return "".concat(this);
        }
        paddings !== null && paddings !== void 0 ? paddings : (paddings = ' ');
        return this + paddings.repeat((length / paddings.length + 1) | 0).slice(0, count);
    });
    (_d = (_m = String.prototype).startsWith) !== null && _d !== void 0 ? _d : (_m.startsWith = function startsWith(searchString, position) {
        if (!position) {
            return this.lastIndexOf(searchString, 0) === 0;
        }
        return this.slice(position, position + searchString.length) === searchString;
    });
    (_e = (_o = String.prototype).endsWith) !== null && _e !== void 0 ? _e : (_o.endsWith = function endsWith(searchString, position) {
        if (!position) {
            var pos_1 = this.length - searchString.length;
            return this.indexOf(searchString, pos_1) === pos_1;
        }
        var pos = position - searchString.length;
        return pos >= 0 && this.slice(pos, position) === searchString;
    });
    (_f = (_p = String.prototype).trim) !== null && _f !== void 0 ? _f : (_p.trim = function trim() {
        return this.replace(/^\s+|\s+$/g, '');
    });
    (_g = (_q = String.prototype).includes) !== null && _g !== void 0 ? _g : (_q.includes = function includes(searchString, position) {
        return this.indexOf(searchString, position) >= 0;
    });
    var original_split = String.prototype.split;
    String.prototype.split = function split(separator, limit) {
        var e_6, _a;
        var str = '' + this;
        if (typeof separator === 'string') {
            return original_split.call(str, separator, limit);
        }
        if (!(separator instanceof RegExp)) {
            return separator[Symbol.split](str, limit);
        }
        var flags = "g".concat(separator.ignoreCase ? 'i' : '').concat(separator.multiline ? 'm' : '');
        var pattern = new RegExp(separator.source, flags);
        var index = 0;
        var result = [];
        try {
            for (var _b = __values(this.matchAll(pattern)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var match = _c.value;
                if (index === match.index && match[0].length === 0)
                    continue;
                result.push.apply(result, __spreadArray([str.slice(index, match.index)], __read(match.slice(1)), false));
                index = match.index + match[0].length;
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
        result.push(str.slice(index));
        return result;
    };
    (_h = (_r = String.prototype).matchAll) !== null && _h !== void 0 ? _h : (_r.matchAll = function matchAll(_pattern) {
        if (!_pattern.global) {
            throw new Error("matchAll with a non-global RegExp");
        }
        var flags = "g".concat(_pattern.ignoreCase ? 'i' : '').concat(_pattern.multiline ? 'm' : '');
        return function (pattern) {
            var match;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!!(match = pattern.exec(this))) return [3, 2];
                        return [4, match];
                    case 1:
                        _a.sent();
                        return [3, 0];
                    case 2: return [2];
                }
            });
        }.call(this, new RegExp(_pattern.source, flags));
    });
})();


(function () {
'use strict';
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function x(a) {
    if (typeof a === 'function') {
        a = a();
        a;
    }
    else {
        a;
    }
    a;
}
var Iterables;
(function (Iterables) {
    /**
     * Iterables のメソッドをメンバに持つIterable。
     *
     * @class IterableEx
     * @implements {I<T>}
     * @template T
     */
    var IterableEx = /** @class */ (function () {
        function IterableEx(param) {
            var p = typeof param === 'function' ? param() : param;
            this[Symbol.iterator] = function () { return p[Symbol.iterator](); };
        }
        IterableEx.prototype.forEach = function (callback) {
            forEach(this, callback);
        };
        IterableEx.prototype.some = function (callback) {
            return some(this, callback);
        };
        IterableEx.prototype.every = function (callback) {
            return every(this, callback);
        };
        IterableEx.prototype.filter = function (callback) {
            return filter(this, callback);
        };
        IterableEx.prototype.map = function (callback) {
            return map(this, callback);
        };
        IterableEx.prototype.reduce = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return reduce.apply(void 0, __spreadArray([this], __read(args), false));
        };
        IterableEx.prototype.join = function (sep) {
            return join(this, sep);
        };
        IterableEx.prototype.concat = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return concat.apply(void 0, __spreadArray([this], __read(args), false));
        };
        return IterableEx;
    }());
    Symbol.iterator;
    /**
     * Iterableの返す各要素に対してコールバックを呼び出す。
     * @export
     * @template T 引数で指定したIterableが返す要素の型を指定する。
     * @template X 引数で指定したIterableの実際の型を指定する。
     * @param {X} x コールバックを呼び出す要素を返すIterableを指定する。
     * @param {(e: T, i: number, x: X) => any} callback 引数で指定したIterableの各要素を渡して呼び出すコールバックを指定する。
     */
    function forEach(x, callback) {
        var e_1, _a;
        var i = 0;
        try {
            for (var _b = __values(x), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                callback(e, i++, x);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Iterables.forEach = forEach;
    /**
     * Iterableの返す各要素に対してコールバックを呼び出し、一つでもtruthyな値を返すものがあればtrueを返す。
     *
     * truthyな値を返す要素が見つかった時点で各要素へのコールバックの呼び出しを中断する。
     *
     * @export
     * @template T 引数で指定したIterableが返す要素の型を指定する。
     * @template X 引数で指定したIterableの実際の型を指定する。
     * @param {X} x コールバックを呼び出す要素を返すIterableを指定する。
     * @param {(e: T, i: number, x: X) => boolean} callback 引数で指定したIterableの各要素を渡して呼び出すコールバックを指定する。
     * @returns {boolean} Iterableの返す各要素に対してコールバックを呼び出し、一つでもtruthyな値を返すものがあればtrueを返す。いずれの要素もfalsyな値を返した場合はfalseを返す。
     */
    function some(x, callback) {
        var e_2, _a;
        var i = 0;
        try {
            for (var _b = __values(x), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                if (callback(e, i++, x)) {
                    return true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    }
    Iterables.some = some;
    /**
     * Iterableの返す各要素に対してコールバックを呼び出し、一つでもfalsyな値を返すものがあればfalseを返す。
     *
     * falsyな値を返す要素が見つかった時点で各要素へのコールバックの呼び出しを中断する。
     *
     * @export
     * @template T 引数で指定したIterableが返す要素の型を指定する。
     * @template X 引数で指定したIterableの実際の型を指定する。
     * @param {X} x コールバックを呼び出す要素を返すIterableを指定する。
     * @param {(e: T, i: number, x: X) => boolean} callback 引数で指定したIterableの各要素を渡して呼び出すコールバックを指定する。
     * @returns {boolean} Iterableの返す各要素に対してコールバックを呼び出し、一つでもfalsyな値を返すものがあればfalseを返す。いずれの要素もtruthyな値を返した場合はtrueを返す。
     */
    function every(x, callback) {
        var e_3, _a;
        var i = 0;
        try {
            for (var _b = __values(x), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                if (!callback(e, i++, x)) {
                    return false;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return true;
    }
    Iterables.every = every;
    function filter(x, callback) {
        return new IterableEx(function () {
            var i, _a, _b, e, e_4_1;
            var e_4, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        i = 0;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(x), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        e = _b.value;
                        if (!callback(e, i++, x)) return [3 /*break*/, 4];
                        return [4 /*yield*/, e];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_4_1 = _d.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a["return"])) _c.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    Iterables.filter = filter;
    /**
     * Iterableの返す各要素に対してコールバックを呼び出し、コールバックの返す値を要素とするIterableExを生成する。
     *
     * @export
     * @template T 引数で指定したIterableが返す要素の型を指定する。
     * @template X 引数で指定したIterableの実際の型を指定する。
     * @template S この関数が返すIterableExの要素の型を指定する。
     * @param {X} x コールバックを呼び出す要素を返すIterableを指定する。
     * @param {(e: T, i: number, x: X) => S} callback 引数で指定したIterableの各要素を渡して呼び出すコールバックを指定する。
     * @returns {IterableEx<T>} Iterableの返す各要素に対してコールバックを呼び出し、コールバックの返す値を要素とするIterableExを生成して返す。
     */
    function map(x, callback) {
        return new IterableEx(function () {
            var i, _a, _b, e, e_5_1;
            var e_5, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        i = 0;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(x), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        e = _b.value;
                        return [4 /*yield*/, callback(e, i++, x)];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_5_1 = _d.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a["return"])) _c.call(_a);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    Iterables.map = map;
    function reduce(x, callback, initialValue) {
        var _a, e_6, _b;
        var iterable = x;
        var initialIndex = 0;
        if (arguments.length <= 2) {
            var itr_1 = iterable[Symbol.iterator]();
            var ir = itr_1.next();
            if (ir.done) {
                throw new Error('Reduce of empty Iterable with no initial value');
            }
            initialIndex = 1;
            iterable = (_a = {},
                _a[Symbol.iterator] = function () {
                    return itr_1;
                },
                _a);
            initialValue = ir.value; // arguments.length <= 2 なら ir.value is S(=T)
        }
        var r = initialValue; // arguments.length > 2 なら initialValue is S(not nullish)
        var i = initialIndex;
        try {
            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                var e = iterable_1_1.value;
                r = callback(r, e, i++, x);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_b = iterable_1["return"])) _b.call(iterable_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return r;
    }
    Iterables.reduce = reduce;
    /**
     * Iterableの返す各要素を文字列に変換し、結合する。
     *
     * @export
     * @template T 引数で指定したIterableが返す要素の型を指定する。
     * @template X 引数で指定したIterableの実際の型を指定する。
     * @param {X} x コールバックを呼び出す要素を返すIterableを指定する。
     * @param {string} sep 結合する際に各要素間に挿入する文字列を指定する。
     * @returns {string} Iterableの返す各要素を文字列に変換し、結合した文字列を返す。
     */
    function join(x, sep) {
        var _a;
        sep !== null && sep !== void 0 ? sep : (sep = ',');
        var itr = x[Symbol.iterator]();
        var _b = itr.next(), value = _b.value, done = _b.done;
        if (done) {
            return '';
        }
        var result = String(value);
        while (((_a = itr.next(), value = _a.value, done = _a.done), !done)) {
            result += sep;
            result += String(value);
        }
        return result;
    }
    Iterables.join = join;
    /**
     * 引数に指定した全てのIterableを結合したIterableExを生成する。
     *
     * @export
     * @template T 全引数の型を指定する。
     * @param {...T} generators Iterableの配列を指定する
     * @returns {Ex<T extends Array<I<infer R>> ? R : never>} 引数に指定した全てのIterableを結合したIterableExを生成して返す。
     */
    function concat() {
        var generators = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            generators[_i] = arguments[_i];
        }
        return new IterableEx(function () {
            var generators_1, generators_1_1, generator, e_7_1;
            var e_7, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, 6, 7]);
                        generators_1 = __values(generators), generators_1_1 = generators_1.next();
                        _b.label = 1;
                    case 1:
                        if (!!generators_1_1.done) return [3 /*break*/, 4];
                        generator = generators_1_1.value;
                        return [5 /*yield**/, __values(generator)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        generators_1_1 = generators_1.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_7_1 = _b.sent();
                        e_7 = { error: e_7_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (generators_1_1 && !generators_1_1.done && (_a = generators_1["return"])) _a.call(generators_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    Iterables.concat = concat;
    function isIterable(collection) {
        return typeof collection[Symbol.iterator] === 'function';
    }
    function from(collection) {
        // もともとIterableExの場合はそのまま返す
        if (isIterableEx(collection)) {
            return collection;
        }
        return new IterableEx(
        // Iterableの場合はIterableExのコンストラクタに引数として渡す
        isIterable(collection)
            ? collection
            : // それ以外はEnumeratorを生成してみてコンストラクタに引数として渡す
                function () {
                    var e;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                e = new Enumerator(collection);
                                _a.label = 1;
                            case 1:
                                if (!!e.atEnd()) return [3 /*break*/, 4];
                                return [4 /*yield*/, e.item()];
                            case 2:
                                _a.sent();
                                _a.label = 3;
                            case 3:
                                e.moveNext();
                                return [3 /*break*/, 1];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
    }
    Iterables.from = from;
    function of() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return from(args);
    }
    Iterables.of = of;
    function max(itr) {
        return reduce(itr, function (mx, e) { return (mx < e ? e : mx); });
    }
    Iterables.max = max;
    function min(itr) {
        return reduce(itr, function (mn, e) { return (mn > e ? e : mn); });
    }
    Iterables.min = min;
    /**
     * IterableExかどうかを判別する
     * @export
     * @param {*} x IterableExかどうかを判別するオブジェクト
     * @returns {x is IterableEx<any>} gがIterableExであれば真を返す。
     */
    function isIterableEx(x) {
        return x && x instanceof IterableEx;
    }
})(Iterables || (Iterables = {}));
var debugContext;
(function (debugContext) {
    function toHexadecimal(n, digit) {
        var buf = '';
        while (digit > 4) {
            var sft = (((digit - 1) / 4) | 0) * 4;
            buf += ((n >> (sft * 4)) & ((1 << ((digit - sft) * 4)) - 1)).toString(16).padStart(digit - sft, '0');
            digit = sft;
            n &= (1 << (digit * 4)) - 1;
        }
        return buf + n.toString(16).padStart(digit, '0');
    }
    debugContext.toHexadecimal = toHexadecimal;
    function quote(s, q) {
        if (q === void 0) { q = '"'; }
        return (q +
            s.replace(/["\\\x00-\x1f\x7f]/g, function (ch) {
                if (ch === q) {
                    return '\\' + q;
                }
                switch (ch) {
                    case '\r':
                        return '\\r';
                    case '\n':
                        return '\\n';
                    case '\t':
                        return '\\t';
                    case '\\':
                        return '\\\\';
                    case '\t':
                        return '\\t';
                }
                return '\\x' + toHexadecimal(ch.charCodeAt(0), 2);
            }) +
            q);
    }
    function getFunctionName(f) {
        return (f.toString().match(/\bfunction\s+([^\s()]+)\s*\(/) || [])[1] || '[anonymous]';
    }
    function inspect(obj) {
        return (function sub(o, depth, stack) {
            var d = depth || 0;
            if (typeof o === 'string') {
                return quote(o);
            }
            if (typeof o === 'number') {
                return o ? '' + o : Infinity / o > 0 ? '0' : '-0';
            }
            if (!o || o === true) {
                return '' + o;
            }
            if (typeof o === 'function') {
                return 'function '.concat(getFunctionName(o), ' () {...}');
            }
            if (Array.isArray(o)) {
                if (o.length === 0) {
                    return '[]';
                }
                if (stack.includes(o)) {
                    return '[...]';
                }
                var _a = __read(o.length <= 3 ? ['[', ']', '', '', ', '] : ['[\n', '  '.repeat(d) + ']', '  '.repeat(d + 1), ',\n', ''], 5), prefix = _a[0], suffix = _a[1], ePrefix_1 = _a[2], eSuffix_1 = _a[3], separator = _a[4];
                return prefix + o.map(function (e) { return ePrefix_1 + sub(e, d + 1, stack.concat(o)) + eSuffix_1; }).join(separator) + suffix;
            }
            if (o instanceof Error) {
                return '[Error {number: 0x'.concat(toHexadecimal(o.number, 8), ', description: ').concat(quote(o.description), ', message: ').concat(quote(o.message), '}]');
            }
            if (o instanceof RegExp) {
                return o.toString();
            }
            if (o instanceof Date) {
                return '[Date '.concat(o.toISOString(), ']');
            }
            var names = Object.keys(o);
            if (names.length === 0) {
                return '{}';
            }
            if (stack.includes(o)) {
                return '{...}';
            }
            {
                var _b = __read(names.length <= 3 ? ['{', '}', '', '', ', '] : ['{\n', '  '.repeat(d) + '}', '  '.repeat(d + 1), ',\n', ''], 5), prefix = _b[0], suffix = _b[1], ePrefix_2 = _b[2], eSuffix_2 = _b[3], separator = _b[4];
                return (prefix +
                    Object.keys(o)
                        .map(function (n) { return (ePrefix_2 + /^\w+$/.test(n) ? n : quote(n) + ': ' + sub(o[n], d + 1, stack.concat(o)) + eSuffix_2); })
                        .join(separator) +
                    suffix);
            }
        })(obj, 0, []);
    }
    function breakpoint() {
        while (true) {
            WScript.StdOut.Write('> ');
            if (WScript.StdIn.AtEndOfStream) {
                break;
            }
            var expr = WScript.StdIn.ReadLine();
            if (/^\s*:continue\s*$/.test(expr)) {
                break;
            }
            if (/^\s*:stack\s*$/.test(expr)) {
                for (var frame = arguments.callee.caller.caller; frame; frame = frame.caller) {
                    WScript.StdOut.WriteLine('function '.concat(getFunctionName(frame), ' (').concat(inspect(Array.from(frame.arguments)).replace(/^\[|\]$/g, ''), ') {...}'));
                }
                continue;
            }
            if (/^\s*:quit\s*$/.test(expr)) {
                WScript.Quit(1);
            }
            try {
                WScript.StdOut.WriteLine(inspect(eval(expr)));
            }
            catch (e) {
                WScript.StdOut.WriteLine(typeof e === 'object' && e && 'number' in e && typeof e.number === 'number' && 'description' in e
                    ? 'Error Code: 0x'.concat(toHexadecimal(e.number, 8), ': ').concat(e.description)
                    : String(e));
            }
        }
    }
    debugContext.breakpoint = breakpoint;
})(debugContext || (debugContext = {}));
/// <reference types="iterables" />
/// <reference types="debug-context" />
/**
 * このスクリプトの使用方法を表示する
 */
function usage() {
    WScript.Echo('\nUSAGE eval.wsf "script" [-r {'.concat(Object.keys(cachedProgid).join('|'), '|name=progid}] [-l script_file]\n'));
    return WScript.Quit(1);
}
/**
 * -rでprogidを指定しなくても使えるように
 */
var cachedProgid = {
    fso: 'Scripting.FileSystemObject',
    installer: 'WindowsInstaller.Installer'
};
(function () {
    var args = [];
    var g = Iterables.from(WScript.Arguments)[Symbol.iterator]();
    var _loop_1 = function (ir) {
        var arg = ir.value;
        if (arg === '--') {
            for (ir = g.next(); !ir.done; ir = g.next()) {
                args.push(ir.value);
            }
            return out_ir_1 = ir, 'break';
        }
        switch (arg) {
            case '-r':
            case '--require':
                // WScript.CreateObjectを一々呼び出さなくてもいいように-rで指定できるようにする
                var nextarg_1 = ((ir = g.next()), ir.done && usage(), ir.value);
                var eqIndex_1 = nextarg_1.indexOf('=');
                var _a = (function () {
                    if (eqIndex_1 <= 0) {
                        if (!(nextarg_1 in cachedProgid)) {
                            return usage();
                        }
                        return { name: nextarg_1, progid: cachedProgid[nextarg_1] };
                    }
                    else {
                        return {
                            name: nextarg_1.substr(0, eqIndex_1),
                            progid: nextarg_1.substr(eqIndex_1 + 1)
                        };
                    }
                })(), name = _a.name, progid = _a.progid;
                this_1[name] = WScript.CreateObject(progid);
                return out_ir_1 = ir, 'continue';
            case '-l':
            case '--load':
                // 外部スクリプトを読み込めるようにする
                var loadpath = ((ir = g.next()), ir.done && usage(), ir.value);
                new Function(WScript.CreateObject('Scripting.FileSystemObject')
                    .OpenTextFile(loadpath)
                    .ReadAll()).call(this_1);
                return out_ir_1 = ir, 'continue';
        }
        args.push(arg);
        out_ir_1 = ir;
    };
    var this_1 = this, out_ir_1;
    for (var ir = g.next(); !ir.done; ir = g.next()) {
        var state_1 = _loop_1(ir);
        ir = out_ir_1;
        if (state_1 === 'break')
            break;
    }
    // 最初の引数はスクリプト、それ以外はスクリプトへの引数
    var script = args.shift();
    // スクリプトがundefined=スクリプトが指定されなかったときは使い方を表示
    if (script === undefined) {
        return usage();
    }
    // Functionを使ってスクリプトを実行
    try {
        var r = new Function('\n      function breakpoint() {\n        this.debugContext.breakpoint();\n      }\n      return eval("'.concat(script.replace(/["\\\x00-\x1f\x7f]/g, function (ch) {
            return ch === '"' || ch === '\\'
                ? '\\' + ch
                : ch === '\t'
                    ? '\\t' : ch === '\r'
                    ? '\\r' : ch === '\n'
                    ? '\\n' : '\\' + debugContext.toHexadecimal(ch.charCodeAt(0), 2);
        }), '")\n    ')).apply(this, args);
        // スクリプトの返値をプロセスの終了コードとする
        WScript.Quit(+r || 0);
    }
    catch (ex) {
        WScript.StdErr.WriteLine(typeof ex === 'object' && ex
            ? ''.concat(('name' in ex && ex.name) || '').concat('number' in ex && typeof ex.number === 'number'
                ? '(0x' + debugContext.toHexadecimal(ex.number, 8) + ')'
                : '').concat(('message' in ex && ex.message) || '')
            : String(ex));
        WScript.Quit(1);
    }
})();


})();
]]></script>
</job>